/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'war'
}

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(17))
  }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {

    implementation 'org.slf4j:slf4j-api:1.7.2'
    implementation 'org.slf4j:slf4j-simple:1.7.20'
   
    providedCompile group: 'jakarta.platform', name: 'jakarta.jakartaee-api', version: '10.0.0'
    
    implementation group: 'org.hibernate.orm', name: 'hibernate-core', version: '6.1.3.Final'
    implementation 'org.primefaces:primefaces:12.0.0:jakarta'
    
    implementation 'com.google.code.gson:gson:2.10'
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    implementation 'org.freemarker:freemarker:2.3.31'
    
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'   
}

def archiveName_ = 'testMe.war'
def wildflyDeployDir = '/home/ksivdna/Downloads/wildfly-27.0.0.Beta1/standalone/deployments'
//def wildflyDeployDir = '/Users/agnegv/Desktop/andrius/wildfly-27.0.0.Final/standalone/deployments'

task undeploy(type:Exec) {
    workingDir wildflyDeployDir
    if(file(wildflyDeployDir + '/' + archiveName_ + '.deployed').exists()){
        commandLine 'rm', archiveName_ + '.deployed'
    }else{
            //do nothing
        commandLine 'pwd'
    }
}

task wait(dependsOn: undeploy){
    sleep(3 * 1000)
}

war {
    dependsOn(wait)
    archiveName archiveName_
}

task copyWar(type: Copy) {
    dependsOn(war)
    from 'build/libs'
    into wildflyDeployDir
}

task deploy(type: Exec) {
    dependsOn(copyWar)
    workingDir wildflyDeployDir
    commandLine 'touch', archiveName_ + '.dodeploy'
}

sourceSets {
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

test {

    classpath = project.sourceSets.test.runtimeClasspath + files("${projectDir}/test")

    filter {
      includeTestsMatching "PathUtilsTest.accessingOneOfThePaths"
    } 

    useJUnitPlatform()
}

